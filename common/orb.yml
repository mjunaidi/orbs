version: 2.1

description: |
  Common commands for building Okode projects
  Repository: https://github.com/okode/orbs

cache-key-npm: &cache-key-npm
  key: cache-npm-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "package-lock.json" }}

cache-key-sonar: &cache-key-sonar
  key: cache-sonar-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "sonar-project.properties" }}

executors:
  node:
    docker:
      - image: circleci/node:12

commands:
  vpn:
    description: Start VPN connection
    parameters:
      user:
        type: string
      password:
        type: string
      config:
        type: string
    steps:
     - run:
          name: Starting VPN connection
          command: |
            wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | sudo apt-key add -
            sudo bash -c 'echo "deb http://build.openvpn.net/debian/openvpn/release/2.4 trusty main" > /etc/apt/sources.list.d/openvpn-aptrepo.list'
            sudo apt-get update || true
            sudo apt-get install openvpn
            echo "<< parameters.config >>" > /tmp/vpn.conf
            echo "<< parameters.user >>" > /tmp/auth.txt
            echo "<< parameters.password >>" >> /tmp/auth.txt
            sudo bash -c "base64 -d /tmp/vpn.conf > /etc/openvpn/vpn.conf"
            sudo cp /tmp/auth.txt /etc/openvpn/auth.txt
            rm -f /tmp/vpn.conf /tmp/auth.txt
            sudo openvpn --daemon --config /etc/openvpn/vpn.conf
            sleep 10
  bitbucket-downloads:
    description: Upload artifacts to BitBucket Downloads
    parameters:
      auth-string:
        type: string
      group:
        type: string
      repo:
        type: string
      tag:
        type: string
      path:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload "Upload artifacts to BitBucket Downloads"
          command: |
            cd /tmp/workspace/<< parameters.path >>
            for FILE in *.ipa; do mv ${FILE} $(basename ${FILE} .ipa)-<< parameters.tag >>.ipa; done
            for FILE in *.apk; do mv ${FILE} $(basename ${FILE} .apk)-<< parameters.tag >>.apk; done
            for FILE in *; do curl -X POST "https://<< parameters.auth-string >>@api.bitbucket.org/2.0/repositories/<< parameters.group >>/<< parameters.repo >>/downloads" --form files=@"${FILE}"; done
  sonar:
    description: Run Sonar scanner
    steps:
      - run:
          name: Downloading Sonar scanner
          command: curl -L http://central.maven.org/maven2/org/sonarsource/scanner/cli/sonar-scanner-cli/3.3.0.1492/sonar-scanner-cli-3.3.0.1492.jar > sonar-scanner.jar
      - restore_cache:
          << : *cache-key-sonar
      - run:
          name: Scanning
          command: java -jar sonar-scanner.jar
      - save_cache:
          << : *cache-key-sonar
          paths:
            - ~/.sonar
  npm-install:
    description: Run npm install
    steps:
      - restore_cache:
          << : *cache-key-npm
      - run:
          name: Installing NPM dependencies
          command: if [ ! -d "node_modules" ]; then npm ci; fi
      - run:
          name: Restoring package-lock.json
          command: git checkout package-lock.json
      - save_cache:
          << : *cache-key-npm
          paths:
            - node_modules
  node-upgrade:
    description: Upgrades Node
    parameters:
      version:
        type: string
        default: "12"
    steps:
      - run:
          name: Upgrading Node version << parameters.version >>
          command: |
            curl -sL https://deb.nodesource.com/setup_<< parameters.version >>.x | sudo -E bash -
            sudo apt-get -qq install -y nodejs
            sudo rm -f /usr/local/bin/node /usr/local/bin/npm /usr/local/bin/npx
            sudo ln -s /usr/bin/node /usr/local/bin
            sudo ln -s /usr/bin/npm /usr/local/bin
            sudo ln -s /usr/bin/npx /usr/local/bin
  chrome-upgrade:
    description: "Upgrades Chrome"
    steps:
      - run:
          name: Upgrading Chrome
          command: |
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get install google-chrome-stable
  sentry-release:
    description: Create Sentry release and uploads sourcemaps from PWA
    parameters:
      org:
        type: string
      project:
        type: string
      auth-token:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Installing Sentry CLI
          command: sudo npm i -g @sentry/cli --quiet --unsafe-perm
      - run:
          name: Creating Sentry release and uploading sourcemaps
          environment:
            SENTRY_ORG: << parameters.org >>
            SENTRY_PROJECT: << parameters.project >>
          command: |
            cd /tmp/workspace/www
            VERSIONENVIRONMENT=${CIRCLE_TAG%-dist}
            ENVIRONMENT=${VERSIONENVIRONMENT#*-}
            VERSION=${VERSIONENVIRONMENT%-$ENVIRONMENT}
            if [[ $CIRCLE_TAG == *-dist ]]; then VERSION=${VERSION}-dist; else VERSION=${CIRCLE_TAG}; fi
            sentry-cli --auth-token << parameters.auth-token >> releases new $VERSION
            sentry-cli --auth-token << parameters.auth-token >> releases files $VERSION upload-sourcemaps .
            if [[ $CIRCLE_TAG == *-dist ]]; then sentry-cli --auth-token << parameters.auth-token >> releases deploys $VERSION new -e $ENVIRONMENT; fi
            sentry-cli --auth-token << parameters.auth-token >> releases finalize $VERSION
  keychain:
    description: Installs iOS certificates
    parameters:
      dev-signing-password:
        type: string
      dist-signing-password:
        type: string
      repo-path:
        type: string
        default: http://github.com/okode/certs
    steps:
      - run:
          name: Installing iOS certificates
          command: |
            if [-d "certs" ]; then
              npx cci ci keychain << parameters.dev-signing-password >> << parameters.dist-signing-password >>
            else
              git clone --quiet --depth=1 << parameters.repo-path >> certs
              KEYCHAIN_PASS=circleci
              KEYCHAIN=ios-build.keychain
              security create-keychain -p $KEYCHAIN_PASS $KEYCHAIN
              security unlock-keychain -p $KEYCHAIN_PASS $KEYCHAIN
              security set-keychain-settings -t 3600 -u $KEYCHAIN
              security list-keychains -s $KEYCHAIN
              security default-keychain -s $KEYCHAIN
              security import certs/apple-wwdcrca.cer -k $KEYCHAIN -T /usr/bin/codesign
              
              if [ -f "config.xml" ]; then
                PACKAGE_NAME=$(grep '<widget' config.xml | tr ' ' '\n' | awk -F'"' '/^id/ {print $2}')
                if [[ $CIRCLE_TAG == *-dist ]]
                then
                  TEAM_ID=$(jq -r '.ios | .[] | select(.packageType | contains("development") | not) | .developmentTeam' build.json)
                  CERT_NAME=$(TEAM_ID="$TEAM_ID" jq -r '.[] | select(.teamId | contains('env.TEAM_ID')) | select(.distribution | contains(true)) | .name' certificates.json)
                  security import certs/$CERT_NAME.p12 -k $KEYCHAIN -P << parameters.dist-signing-password >> -A
                  PROV_PROFILE=$(jq -r '.ios.release.provisioningProfile' build.json)

                else
                  TEAM_ID=$(jq -r '.ios | .[] | select(.packageType | contains("development")) | .developmentTeam' build.json)
                  CERT_NAME=$(TEAM_ID="$TEAM_ID" jq -r '.[] | select(.teamId | contains('env.TEAM_ID')) | select(.distribution | contains(false)) | .name' certs/certificates.json)
                  security import certs/$CERT_NAME.p12 -k $KEYCHAIN -P << parameters.dev-signing-password >> -A
                  PROV_PROFILE=$(jq -r '.ios.debug.provisioningProfile' build.json)
                  DEVELOPMENT_FLAG=--development
                  CERT_OWNER='--cert_owner_name "Okode Developers"'
                fi
              else
                if [ -f "capacitor.config.json" ]; then
                  echo "Capacitor not implemented"
                fi
              fi

              "security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASS $KEYCHAIN"

              LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8                                      \
              fastlane sigh                                                            \
              --force                                                                  \
              $DEVELOPMENT_FLAG                                                        \
              --app_identifier    $PACKAGE_NAME                                        \
              --provisioning_name $PROV_PROFILE                                        \
              --team_id           $TEAM_ID                                             \
              $CERT_OWNER
            fi

              


jobs:
  sentry-release:
    description: Create Sentry release and uploads sourcemaps from bundle
    parameters:
      org:
        type: string
      project:
        type: string
      auth-token:
        type: string
    executor: node
    steps:
      - sentry-release:
          org: << parameters.org >>
          project: << parameters.project >>
          auth-token: << parameters.auth-token >>
  bitbucket-downloads:
    description: Upload artifacts to BitBucket Downloads
    parameters:
      auth-string:
        type: string
      group:
        type: string
      repo:
        type: string
      tag:
        type: string
      path:
        type: string
    executor: node
    steps:
      - bitbucket-downloads:
          auth-string: << parameters.auth-string >>
          group: << parameters.group >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
          path: << parameters.path >>
  sonar-vpn:
    machine: true
    parameters:
      user:
        type: string
      password:
        type: string
      config:
        type: string
      attach-results-path:
        type: string
        default: ''
    steps:
      - checkout
      - vpn:
          user: << parameters.user >>
          password: << parameters.password >>
          config: << parameters.config >>
      - when:
          condition: << parameters.attach-results-path >>
          steps:
            - attach_workspace:
                at: .
      - sonar
