version: 2.1

description: |
  Common commands for building Okode projects
  Repository: https://github.com/okode/orbs

cache-key-npm: &cache-key-npm
  key: cache-npm-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "package-lock.json" }}

cache-key-sonar: &cache-key-sonar
  key: cache-sonar-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "sonar-project.properties" }}

executors:
  node:
    docker:
      - image: circleci/node:12

commands:
  install-ios:
    description: Install Ionic iOS requirements
    parameters:
      cordova-version:
        type: string
        default: "latest"
      cocoapods-version:
        type: string
        default: "'>= 0'"
      fastlane-version:
        type: string
        default: "'>= 0'"
    steps:
      - run:
          name: Installing Ionic iOS requirements
          command: |
            sudo gem install cocoapods -v << parameters.cocoapods-version >>
            sudo gem install fastlane -v << parameters.fastlane-version >>
            npm install --quiet -g ionic cordova@<< parameters.cordova-version >>
      - run:
          name: Installing Firebase CLI
          command: npm install -g firebase-tools
          
  install-android:
    description: Install Ionic Android requirements
    parameters:
      cordova-version:
        type: string
        default: "latest"
      gradle-version:
        type: string
        default: "5.4.1"
    steps:
      - run:
          name: Installing Ionic Android requirements
          command: |
            sudo npm install --quiet -g ionic cordova@<< parameters.cordova-version >>
            yes | sdkmanager --licenses || true
            # yes | sdkmanager "build-tools;28.0.3" || true
            yes | sdkmanager "platforms;android-28" || true
            yes | sdkmanager "platform-tools" || true
            yes | sdkmanager "tools" || true
            curl https://downloads.gradle.org/distributions/gradle-<< parameters.gradle-version >>-bin.zip > /tmp/gradle-<< parameters.gradle-version >>-bin.zip
            sudo unzip -qq /tmp/gradle-<< parameters.gradle-version >>-bin.zip -d /tmp && rm /tmp/gradle-<< parameters.gradle-version >>-bin.zip
            sudo mv /tmp/gradle-<< parameters.gradle-version >> /opt/gradle
            sudo ln -s /opt/gradle/bin/gradle /usr/local/bin/gradle
            if [[ $CIRCLE_TAG == *-dist ]]; then
              gem install fastlane -NV
            fi
      - run:
          name: Installing Firebase CLI
          command: sudo npm install -g firebase-tools

  vpn:
    description: Start VPN connection
    parameters:
      user:
        type: string
      password:
        type: string
      config:
        type: string
    steps:
     - run:
        name: Starting VPN connection
        command: |
          wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg > /tmp/repo-public.gpg
          sudo apt-key add /tmp/repo-public.gpg
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/dpkg/lock
          sudo dpkg --configure -a
          sudo bash -c 'echo "deb http://build.openvpn.net/debian/openvpn/release/2.4 trusty main" > /etc/apt/sources.list.d/openvpn-aptrepo.list'
          sudo apt-get update || true
          sudo apt-get install openvpn
          echo "<< parameters.config >>" > /tmp/vpn.conf
          echo "<< parameters.user >>" > /tmp/auth.txt
          echo "<< parameters.password >>" >> /tmp/auth.txt
          sudo bash -c "base64 -d /tmp/vpn.conf > /etc/openvpn/vpn.conf"
          sudo cp /tmp/auth.txt /etc/openvpn/auth.txt
          rm -f /tmp/vpn.conf /tmp/auth.txt
          sudo openvpn --daemon --config /etc/openvpn/vpn.conf
          sleep 10
  bitbucket-downloads:
    description: Upload artifacts to BitBucket Downloads
    parameters:
      auth-string:
        type: string
      group:
        type: string
      repo:
        type: string
      tag:
        type: string
      path:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload "Upload artifacts to BitBucket Downloads"
          command: |
            cd /tmp/workspace/<< parameters.path >>
            for FILE in *.ipa; do mv ${FILE} $(basename ${FILE} .ipa)-<< parameters.tag >>.ipa; done
            for FILE in *.apk; do mv ${FILE} $(basename ${FILE} .apk)-<< parameters.tag >>.apk; done
            for FILE in *; do curl -X POST "https://<< parameters.auth-string >>@api.bitbucket.org/2.0/repositories/<< parameters.group >>/<< parameters.repo >>/downloads" --form files=@"${FILE}"; done
  sonar:
    description: Run Sonar scanner
    steps:
      - run:
          name: Downloading Sonar scanner
          command: curl -L https://repo1.maven.org/maven2/org/sonarsource/scanner/cli/sonar-scanner-cli/3.3.0.1492/sonar-scanner-cli-3.3.0.1492.jar > sonar-scanner.jar
      - restore_cache:
          << : *cache-key-sonar
      - run:
          name: Scanning
          command: java -jar sonar-scanner.jar
      - save_cache:
          << : *cache-key-sonar
          paths:
            - ~/.sonar
  npm-install:
    description: Run npm install
    steps:
      - restore_cache:
          << : *cache-key-npm
      - run:
          name: Installing NPM dependencies
          command: if [ ! -d "node_modules" ]; then npm ci; fi
      - run:
          name: Restoring package-lock.json
          command: git checkout package-lock.json
      - save_cache:
          << : *cache-key-npm
          paths:
            - node_modules
  node-upgrade:
    description: Upgrades Node
    parameters:
      version:
        type: string
        default: "12"
    steps:
      - run:
          name: Upgrading Node version << parameters.version >>
          command: |
            sudo npm install -g n
            sudo n << parameters.version >>
  chrome-upgrade:
    description: "Upgrades Chrome"
    steps:
      - run:
          name: Upgrading Chrome
          command: |
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get install google-chrome-stable
  sentry-release:
    description: Create Sentry release and uploads sourcemaps from PWA
    parameters:
      org:
        type: string
      project:
        type: string
      auth-token:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Installing Sentry CLI
          command: sudo npm i -g @sentry/cli --quiet --unsafe-perm
      - run:
          name: Creating Sentry release and uploading sourcemaps
          environment:
            SENTRY_ORG: << parameters.org >>
            SENTRY_PROJECT: << parameters.project >>
          command: |
            cd /tmp/workspace/www
            VERSIONENVIRONMENT=${CIRCLE_TAG%-dist}
            ENVIRONMENT=${VERSIONENVIRONMENT#*-}
            VERSION=${VERSIONENVIRONMENT%-$ENVIRONMENT}
            if [[ $CIRCLE_TAG == *-dist ]]; then VERSION=${VERSION}-dist; else VERSION=${CIRCLE_TAG}; fi
            sentry-cli --auth-token << parameters.auth-token >> releases new $VERSION
            sentry-cli --auth-token << parameters.auth-token >> releases files $VERSION upload-sourcemaps . --no-rewrite
            sentry-cli --auth-token << parameters.auth-token >> releases set-commits $VERSION --commit "okode/<< parameters.project >>@$CIRCLE_SHA1" || true
            if [[ $CIRCLE_TAG == *-dist ]]; then sentry-cli --auth-token << parameters.auth-token >> releases deploys $VERSION new -e $ENVIRONMENT; fi
            sentry-cli --auth-token << parameters.auth-token >> releases finalize $VERSION
  keychain:
    description: Installs iOS certificates
    parameters:
      package-name:
        type: string
      team-id:
        type: string
      development-provisioning-name:
        type: string
      distribution-provisioning-name:
        type: string
      development-signing-password:
        type: string
      distribution-signing-password:
        type: string
      dev-certs-repo-url:
        type: string
        default: ''
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
    steps:
      - add_ssh_keys:
          fingerprints:
            - "<< parameters.ssh-permission-fingerprint >>"
      - run:
          name: Installing iOS certificates
          command: |
            KEY_CHAIN=ios-build.keychain
            KEY_CHAIN_PASS=circleci
            CERT_DIR=certs
            security create-keychain -p ${KEY_CHAIN_PASS} ${KEY_CHAIN}
            security unlock-keychain -p ${KEY_CHAIN_PASS} ${KEY_CHAIN}
            security set-keychain-settings -t 3600 -u ${KEY_CHAIN}
            security list-keychains -s ${KEY_CHAIN}
            security default-keychain -s ${KEY_CHAIN}
            if [ -z "<< parameters.dev-certs-repo-url >>" ] ||Â [ -z "<< parameters.dist-certs-repo-url >>" ]; then
              curl https://developer.apple.com/certificationauthority/AppleWWDRCA.cer > ${CERT_DIR}/AppleWWDRCA.cer
              security import ${CERT_DIR}/AppleWWDRCA.cer -k ${KEY_CHAIN} -T /usr/bin/codesign
              security import ${CERT_DIR}/development.p12 -k ${KEY_CHAIN} -P << parameters.development-signing-password >> -A
              security import ${CERT_DIR}/distribution.p12 -k ${KEY_CHAIN} -P << parameters.distribution-signing-password >> -A
            else
              rm -rf ${CERT_DIR}
              if [[ $CIRCLE_TAG == *-dist ]]; then
                git clone --quiet --depth=1 << parameters.dist-certs-repo-url >> ${CERT_DIR}
              else
                git clone --quiet --depth=1 << parameters.dev-certs-repo-url >> ${CERT_DIR}
              fi
              curl https://developer.apple.com/certificationauthority/AppleWWDRCA.cer > ${CERT_DIR}/AppleWWDRCA.cer
              security import ${CERT_DIR}/AppleWWDRCA.cer -k ${KEY_CHAIN} -T /usr/bin/codesign
              for cert in $(jq -r '.[].name' ${CERT_DIR}/certificates.json); do
                CERT_PASS=$(jq -r --arg cert "$cert" '.[] | select(.name == $cert) | .password' ${CERT_DIR}/certificates.json)
                security import ${CERT_DIR}/${cert}.p12 -k ${KEY_CHAIN} -P ${CERT_PASS} -A \;
              done
            fi
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${KEY_CHAIN_PASS} ${KEY_CHAIN}

            LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 fastlane produce  \
            --app_identifier "<< parameters.package-name >>"      \
            --team_id "<< parameters.team-id >>"                  \
            --app_name "${CIRCLE_PROJECT_REPONAME}"               \
            --skip_itc || true

            if [[ $CIRCLE_TAG == *-dist ]]; then
              LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 fastlane sigh --force                \
                --app_identifier "<< parameters.package-name >>"                       \
                --provisioning_name "<< parameters.distribution-provisioning-name >>"  \
                --team_id "<< parameters.team-id >>"
            else
              LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 fastlane sigh --force --development  \
              --app_identifier "<< parameters.package-name >>"                         \
              --provisioning_name "<< parameters.development-provisioning-name >>"     \
              --team_id "<< parameters.team-id >>"                                     \
              --cert_owner_name "Okode Developers"
            fi
  keystores:
    description: Retrieves Android keystores
    parameters:
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
    steps:
      - add_ssh_keys:
          fingerprints:
            - "<< parameters.ssh-permission-fingerprint >>"
      - run:
          name: Getting Android distribution keystore (if needed)
          command: |
            if [[ $CIRCLE_TAG == *-dist ]] && [[ -n "<< parameters.dist-certs-repo-url >>" ]]; then
              CERT_DIR=certs
              rm -rf ${CERT_DIR}
              git clone --quiet --depth=1 << parameters.dist-certs-repo-url >> ${CERT_DIR}
              STORE_PASS=$(jq -r '[.[] | select(.distribution == true) | .storePassword][0]' ${CERT_DIR}/keystores.json)
              KEYSTORE_PASS=$(jq -r '[.[] | select(.distribution == true) | .password][0]' ${CERT_DIR}/keystores.json)
              sed -i 's/KEYSTORE_STORE_PASS_PLACEHOLDER/'"$STORE_PASS"'/' build.json
              sed -i 's/KEYSTORE_PASS_PLACEHOLDER/'"$KEYSTORE_PASS"'/' build.json
            fi
  custom-npm-login:
    description: Logging into custom NPM registry
    steps:
      - run:
          name: Installing NPM CLI Login
          command: sudo npm install -g npm-cli-adduser
      - run:
          name: Authenticating NPM
          command: npm-cli-adduser

jobs:
  sentry-release:
    description: Create Sentry release and uploads sourcemaps from bundle
    parameters:
      org:
        type: string
      project:
        type: string
      auth-token:
        type: string
    executor: node
    steps:
      - sentry-release:
          org: << parameters.org >>
          project: << parameters.project >>
          auth-token: << parameters.auth-token >>
  bitbucket-downloads:
    description: Upload artifacts to BitBucket Downloads
    parameters:
      auth-string:
        type: string
      group:
        type: string
      repo:
        type: string
      tag:
        type: string
      path:
        type: string
    executor: node
    steps:
      - bitbucket-downloads:
          auth-string: << parameters.auth-string >>
          group: << parameters.group >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
          path: << parameters.path >>
  sonar-vpn:
    machine: true
    parameters:
      user:
        type: string
      password:
        type: string
      config:
        type: string
      attach-results-path:
        type: string
        default: ''
    steps:
      - checkout
      - vpn:
          user: << parameters.user >>
          password: << parameters.password >>
          config: << parameters.config >>
      - when:
          condition: << parameters.attach-results-path >>
          steps:
            - attach_workspace:
                at: .
      - sonar
